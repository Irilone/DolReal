{
  "metadata": {
    "agent_id": "gpt5-codex",
    "timestamp": "2025-10-14T00:30:00Z",
    "execution_time_ms": 12500,
    "status": "completed",
    "next_agents": ["claude-frontend", "claude-backend"],
    "input_artifacts": ["1_gemini_ultra_research.json"],
    "output_artifacts": ["2_gpt5_codex_architecture.json"]
  },

  "system_architecture": {
    "tech_stack": {
      "framework": {
        "name": "Next.js",
        "version": "15.0.0",
        "router": "App Router",
        "rationale": "Server components, streaming SSR, built-in optimization"
      },
      "language": {
        "name": "TypeScript",
        "version": "5.3.0",
        "mode": "strict",
        "rationale": "Type safety, IntelliSense, refactoring support"
      },
      "styling": {
        "name": "Tailwind CSS",
        "version": "4.0.0",
        "features": ["dark mode", "RTL support", "custom animations"],
        "rationale": "Utility-first, small bundle, excellent DX"
      },
      "i18n": {
        "name": "react-i18next",
        "version": "14.0.0",
        "locales": ["se", "en", "ar", "fa", "zh", "es"],
        "rationale": "Mature ecosystem, Next.js integration, namespace support"
      },
      "state_management": {
        "name": "Zustand",
        "version": "4.5.0",
        "rationale": "Lightweight (1KB), simple API, no boilerplate"
      },
      "runtime": {
        "name": "Bun",
        "version": "1.2.23",
        "rationale": "7-100x faster than npm, native TypeScript, optimized for M2"
      }
    },

    "directory_structure": {
      "src": {
        "app": {
          "[locale]": {
            "page.tsx": "Home page with stream grid",
            "layout.tsx": "Locale-specific layout with dir attribute",
            "stream": {
              "[node]": {
                "page.tsx": "Individual stream page"
              }
            },
            "schedule": {
              "page.tsx": "Event schedule page"
            },
            "archive": {
              "page.tsx": "VOD archive page"
            },
            "about": {
              "page.tsx": "About event page"
            }
          },
          "api": {
            "streams": {
              "route.ts": "GET stream list with day logic"
            },
            "stream-health": {
              "[streamId]": {
                "route.ts": "GET YouTube stream health"
              }
            },
            "viewer-count": {
              "route.ts": "GET aggregate viewer count"
            },
            "infranodus": {
              "analyze": {
                "route.ts": "POST text for analysis"
              },
              "graph": {
                "[contextId]": {
                  "route.ts": "GET graph visualization data"
                }
              }
            }
          },
          "layout.tsx": "Root layout",
          "globals.css": "Global styles and Tailwind imports"
        },
        "components": {
          "ui": {
            "button.tsx": "Reusable button component",
            "card.tsx": "Card container component",
            "modal.tsx": "Modal dialog component",
            "select.tsx": "Select dropdown component"
          },
          "features": {
            "Header.tsx": "Main navigation header",
            "Footer.tsx": "Site footer",
            "StreamGrid.tsx": "4-stream grid layout",
            "StreamCard.tsx": "Individual stream card",
            "YouTubeEmbed.tsx": "YouTube iframe wrapper",
            "LanguageSelector.tsx": "Language switcher dropdown",
            "ThemeToggle.tsx": "Dark mode toggle",
            "StreamHealthIndicator.tsx": "Stream status badge",
            "ViewerCount.tsx": "Live viewer counter",
            "InfraNodusGraph.tsx": "Knowledge graph visualization",
            "ConceptCloud.tsx": "Tag cloud of key concepts",
            "ScheduleTimeline.tsx": "Event schedule display",
            "EventCountdown.tsx": "Countdown to event start"
          },
          "shared": {
            "Loading.tsx": "Loading spinner",
            "ErrorBoundary.tsx": "Error boundary wrapper",
            "SEO.tsx": "Meta tags component"
          }
        },
        "lib": {
          "youtube": {
            "client.ts": "YouTube Data API v3 client",
            "types.ts": "YouTube API response types"
          },
          "infranodus": {
            "client.ts": "InfraNodus REST API client",
            "cache.ts": "Caching strategy implementation",
            "rate-limiter.ts": "Rate limiting logic"
          },
          "utils": {
            "cn.ts": "Tailwind className utility",
            "date.ts": "Date formatting utilities",
            "locale.ts": "Locale detection and management"
          }
        },
        "hooks": {
          "useStreamHealth.ts": "Hook for stream health monitoring",
          "useViewerCount.ts": "Hook for viewer count polling",
          "useLocalStorage.ts": "LocalStorage persistence hook",
          "useMediaQuery.ts": "Responsive breakpoint hook"
        },
        "types": {
          "stream.ts": "Stream domain types",
          "i18n.ts": "Internationalization types",
          "api.ts": "API request/response types",
          "component.ts": "Common component prop types"
        },
        "i18n": {
          "config.ts": "i18next configuration",
          "locales": {
            "se.json": "Swedish translations",
            "en.json": "English translations",
            "ar.json": "Arabic translations",
            "fa.json": "Farsi translations",
            "zh.json": "Chinese translations",
            "es.json": "Spanish translations"
          }
        },
        "stores": {
          "streamStore.ts": "Zustand store for stream state",
          "uiStore.ts": "Zustand store for UI state"
        }
      },
      "public": {
        "images": "Static images",
        "fonts": "Custom fonts",
        "favicon.ico": "Site favicon"
      },
      "docs": {
        "api": "API documentation",
        "components": "Component documentation"
      },
      "plans": "Implementation plans from Agent 1",
      "artifacts": "Agent outputs",
      "tests": {
        "unit": "Jest unit tests",
        "e2e": "Playwright E2E tests"
      }
    },

    "component_tree": [
      {
        "name": "RootLayout",
        "path": "src/app/layout.tsx",
        "dependencies": ["Header", "Footer", "globals.css"],
        "assigned_to": "claude-frontend",
        "props": {
          "children": "React.ReactNode"
        },
        "description": "Root layout with header, main content area, and footer"
      },
      {
        "name": "LocaleLayout",
        "path": "src/app/[locale]/layout.tsx",
        "dependencies": ["i18n config"],
        "assigned_to": "claude-frontend",
        "props": {
          "children": "React.ReactNode",
          "params": "{ locale: Locale }"
        },
        "description": "Locale-specific layout with dir attribute for RTL support"
      },
      {
        "name": "HomePage",
        "path": "src/app/[locale]/page.tsx",
        "dependencies": ["StreamGrid", "EventCountdown", "SEO"],
        "assigned_to": "claude-frontend",
        "props": {
          "params": "{ locale: Locale }"
        },
        "description": "Main landing page with hero section and stream grid"
      },
      {
        "name": "StreamPage",
        "path": "src/app/[locale]/stream/[node]/page.tsx",
        "dependencies": ["YouTubeEmbed", "StreamHealthIndicator", "InfraNodusGraph"],
        "assigned_to": "claude-frontend",
        "props": {
          "params": "{ locale: Locale, node: string }"
        },
        "description": "Full-screen individual stream view"
      },
      {
        "name": "Header",
        "path": "src/components/features/Header.tsx",
        "dependencies": ["LanguageSelector", "ThemeToggle"],
        "assigned_to": "claude-frontend",
        "props": {
          "currentLocale": "Locale"
        },
        "description": "Site header with navigation, language switcher, and dark mode toggle"
      },
      {
        "name": "StreamGrid",
        "path": "src/components/features/StreamGrid.tsx",
        "dependencies": ["StreamCard", "useStreamHealth"],
        "assigned_to": "claude-frontend",
        "props": {
          "streams": "Stream[]"
        },
        "description": "Responsive grid displaying all 4 streams"
      },
      {
        "name": "StreamCard",
        "path": "src/components/features/StreamCard.tsx",
        "dependencies": ["Card", "StreamHealthIndicator", "ViewerCount"],
        "assigned_to": "claude-frontend",
        "props": {
          "stream": "Stream"
        },
        "description": "Individual stream card with thumbnail, title, and status"
      },
      {
        "name": "YouTubeEmbed",
        "path": "src/components/features/YouTubeEmbed.tsx",
        "dependencies": [],
        "assigned_to": "claude-frontend",
        "props": {
          "videoId": "string",
          "title": "string",
          "autoplay": "boolean",
          "muted": "boolean"
        },
        "description": "YouTube iframe embed with responsive aspect ratio"
      },
      {
        "name": "LanguageSelector",
        "path": "src/components/features/LanguageSelector.tsx",
        "dependencies": ["Select", "i18n"],
        "assigned_to": "claude-frontend",
        "props": {},
        "description": "Dropdown for switching between 6 languages"
      },
      {
        "name": "StreamHealthIndicator",
        "path": "src/components/features/StreamHealthIndicator.tsx",
        "dependencies": ["useStreamHealth"],
        "assigned_to": "claude-frontend",
        "props": {
          "streamId": "string"
        },
        "description": "Color-coded badge showing stream health status"
      },
      {
        "name": "ViewerCount",
        "path": "src/components/features/ViewerCount.tsx",
        "dependencies": ["useViewerCount"],
        "assigned_to": "claude-frontend",
        "props": {
          "streamIds": "string[]"
        },
        "description": "Live viewer count with auto-refresh"
      },
      {
        "name": "InfraNodusGraph",
        "path": "src/components/features/InfraNodusGraph.tsx",
        "dependencies": ["react-force-graph"],
        "assigned_to": "claude-frontend",
        "props": {
          "contextId": "string"
        },
        "description": "Interactive knowledge graph visualization"
      },
      {
        "name": "YouTubeClient",
        "path": "src/lib/youtube/client.ts",
        "dependencies": [],
        "assigned_to": "claude-backend",
        "exports": ["getStreamHealth", "getViewerCount", "getStreamList"],
        "description": "YouTube Data API v3 client with rate limiting"
      },
      {
        "name": "InfraNodusClient",
        "path": "src/lib/infranodus/client.ts",
        "dependencies": ["rate-limiter", "cache"],
        "assigned_to": "claude-backend",
        "exports": ["analyzeText", "getGraph", "getConcepts"],
        "description": "InfraNodus REST API client with caching"
      },
      {
        "name": "StreamsAPI",
        "path": "src/app/api/streams/route.ts",
        "dependencies": ["youtube client"],
        "assigned_to": "claude-backend",
        "exports": ["GET"],
        "description": "API endpoint for retrieving stream list with day logic"
      },
      {
        "name": "StreamHealthAPI",
        "path": "src/app/api/stream-health/[streamId]/route.ts",
        "dependencies": ["youtube client"],
        "assigned_to": "claude-backend",
        "exports": ["GET"],
        "description": "API endpoint for stream health status"
      },
      {
        "name": "InfraNodusAnalyzeAPI",
        "path": "src/app/api/infranodus/analyze/route.ts",
        "dependencies": ["infranodus client"],
        "assigned_to": "claude-backend",
        "exports": ["POST"],
        "description": "API endpoint for text analysis"
      }
    ],

    "data_flow": {
      "stream_health_monitoring": {
        "flow": "YouTubeDataAPI → StreamHealthAPI → useStreamHealth hook → StreamHealthIndicator component",
        "polling_interval": "15 seconds",
        "caching": "No caching (real-time data)"
      },
      "viewer_count": {
        "flow": "YouTubeDataAPI → ViewerCountAPI → useViewerCount hook → ViewerCount component",
        "polling_interval": "30 seconds",
        "caching": "No caching (real-time data)"
      },
      "infranodus_graph": {
        "flow": "InfraNodusAPI → InfraNodusGraphAPI → InfraNodusGraph component",
        "polling_interval": "5 minutes",
        "caching": "5-minute cache via unstable_cache"
      },
      "stream_list": {
        "flow": "Environment variables + day logic → StreamsAPI → HomePage/StreamGrid",
        "polling_interval": "On page load only",
        "caching": "Static at build time, revalidated on demand"
      }
    }
  },

  "api_contracts": [
    {
      "endpoint": "/api/streams",
      "method": "GET",
      "description": "Get list of all streams with availability based on current day",
      "request_schema": null,
      "response_schema": {
        "type": "object",
        "properties": {
          "streams": {
            "type": "array",
            "items": {
              "type": "object",
              "properties": {
                "id": { "type": "string", "example": "nodvast" },
                "name": { "type": "string", "example": "Nodväst" },
                "youtubeId": { "type": "string", "example": "dQw4w9WgXcQ" },
                "embedUrl": { "type": "string" },
                "active": { "type": "boolean", "description": "Whether stream is available today" },
                "day": { "type": "number", "enum": [1, 2] }
              },
              "required": ["id", "name", "youtubeId", "embedUrl", "active", "day"]
            }
          },
          "currentDay": { "type": "number", "enum": [1, 2] }
        }
      }
    },
    {
      "endpoint": "/api/stream-health/[streamId]",
      "method": "GET",
      "description": "Get real-time health status of a specific stream",
      "request_schema": {
        "params": {
          "streamId": { "type": "string", "description": "YouTube stream ID" }
        }
      },
      "response_schema": {
        "type": "object",
        "properties": {
          "status": {
            "type": "string",
            "enum": ["good", "ok", "bad", "offline"],
            "description": "Stream health status"
          },
          "message": { "type": "string", "example": "Excellent stream health" },
          "details": {
            "type": "object",
            "properties": {
              "bitrate": { "type": "number", "description": "Current bitrate in Kbps" },
              "resolution": { "type": "string", "example": "2160p" },
              "fps": { "type": "number", "example": 30 }
            }
          }
        }
      }
    },
    {
      "endpoint": "/api/viewer-count",
      "method": "GET",
      "description": "Get aggregate viewer count across all streams",
      "request_schema": null,
      "response_schema": {
        "type": "object",
        "properties": {
          "counts": {
            "type": "array",
            "items": {
              "type": "object",
              "properties": {
                "videoId": { "type": "string" },
                "concurrentViewers": { "type": "number" }
              }
            }
          },
          "total": { "type": "number", "description": "Sum of all concurrent viewers" }
        }
      }
    },
    {
      "endpoint": "/api/infranodus/analyze",
      "method": "POST",
      "description": "Send text to InfraNodus for discourse analysis",
      "request_schema": {
        "type": "object",
        "properties": {
          "text": { "type": "string", "minLength": 1 },
          "contextId": { "type": "string", "description": "Graph context ID" }
        },
        "required": ["text", "contextId"]
      },
      "response_schema": {
        "type": "object",
        "properties": {
          "success": { "type": "boolean" },
          "contextId": { "type": "string" },
          "statementId": { "type": "string" }
        }
      }
    },
    {
      "endpoint": "/api/infranodus/graph/[contextId]",
      "method": "GET",
      "description": "Retrieve graph visualization data from InfraNodus",
      "request_schema": {
        "params": {
          "contextId": { "type": "string" }
        }
      },
      "response_schema": {
        "type": "object",
        "properties": {
          "nodes": {
            "type": "array",
            "items": {
              "type": "object",
              "properties": {
                "id": { "type": "string" },
                "label": { "type": "string" },
                "val": { "type": "number", "description": "Node weight" }
              }
            }
          },
          "links": {
            "type": "array",
            "items": {
              "type": "object",
              "properties": {
                "source": { "type": "string" },
                "target": { "type": "string" },
                "value": { "type": "number", "description": "Link weight" }
              }
            }
          }
        }
      }
    }
  ],

  "scaffolding": {
    "package_json": {
      "name": "dol-2025",
      "version": "2.0.0",
      "description": "Dagar om Lagar 2025 - Multi-agent orchestration streaming platform",
      "private": true,
      "type": "module",
      "scripts": {
        "dev": "next dev",
        "build": "next build",
        "start": "next start",
        "lint": "next lint",
        "typecheck": "tsc --noEmit",
        "test": "jest",
        "test:watch": "jest --watch",
        "test:e2e": "playwright test",
        "format": "prettier --write \"src/**/*.{ts,tsx,json,css,md}\"",
        "clean": "rm -rf .next out"
      },
      "dependencies": {
        "next": "^15.0.0",
        "react": "^18.3.1",
        "react-dom": "^18.3.1",
        "react-i18next": "^14.0.0",
        "i18next": "^23.7.0",
        "zustand": "^4.5.0",
        "clsx": "^2.1.0",
        "tailwind-merge": "^2.2.0",
        "react-force-graph-2d": "^1.25.0",
        "googleapis": "^134.0.0"
      },
      "devDependencies": {
        "@types/node": "^20.10.0",
        "@types/react": "^18.3.0",
        "@types/react-dom": "^18.3.0",
        "@testing-library/react": "^14.1.0",
        "@testing-library/jest-dom": "^6.1.0",
        "@playwright/test": "^1.40.0",
        "typescript": "^5.3.0",
        "tailwindcss": "^4.0.0",
        "postcss": "^8.4.0",
        "autoprefixer": "^10.4.0",
        "eslint": "^8.56.0",
        "eslint-config-next": "^15.0.0",
        "prettier": "^3.2.0",
        "prettier-plugin-tailwindcss": "^0.5.0",
        "jest": "^29.7.0",
        "jest-environment-jsdom": "^29.7.0"
      }
    },
    
    "tsconfig_json": {
      "compilerOptions": {
        "target": "ES2020",
        "lib": ["ES2020", "DOM", "DOM.Iterable"],
        "jsx": "preserve",
        "module": "ESNext",
        "moduleResolution": "bundler",
        "resolveJsonModule": true,
        "allowJs": true,
        "strict": true,
        "noEmit": true,
        "esModuleInterop": true,
        "skipLibCheck": true,
        "forceConsistentCasingInFileNames": true,
        "incremental": true,
        "isolatedModules": true,
        "paths": {
          "@/*": ["./src/*"],
          "@/components/*": ["./src/components/*"],
          "@/lib/*": ["./src/lib/*"],
          "@/hooks/*": ["./src/hooks/*"],
          "@/types/*": ["./src/types/*"],
          "@/i18n/*": ["./src/i18n/*"],
          "@/stores/*": ["./src/stores/*"]
        },
        "plugins": [{ "name": "next" }]
      },
      "include": ["next-env.d.ts", "**/*.ts", "**/*.tsx", ".next/types/**/*.ts"],
      "exclude": ["node_modules", ".next", "out"]
    },
    
    "next_config_js": "/** @type {import('next').NextConfig} */\nconst nextConfig = {\n  reactStrictMode: true,\n  swcMinify: true,\n\n  // i18n configuration\n  i18n: {\n    locales: ['se', 'en', 'ar', 'fa', 'zh', 'es'],\n    defaultLocale: 'se',\n    localeDetection: true,\n  },\n\n  // Image optimization\n  images: {\n    domains: ['infranodus.com', 'i.ytimg.com', 'img.youtube.com'],\n    formats: ['image/avif', 'image/webp'],\n  },\n\n  // Performance optimizations\n  compiler: {\n    removeConsole: process.env.NODE_ENV === 'production',\n  },\n\n  // Environment variables\n  env: {\n    NEXT_PUBLIC_SITE_NAME: 'Dagar om Lagar 2025',\n    NEXT_PUBLIC_SITE_URL: process.env.NEXT_PUBLIC_SITE_URL || 'http://localhost:3000',\n  },\n\n  // Headers for security\n  async headers() {\n    return [\n      {\n        source: '/:path*',\n        headers: [\n          { key: 'X-DNS-Prefetch-Control', value: 'on' },\n          { key: 'X-Frame-Options', value: 'SAMEORIGIN' },\n          { key: 'X-Content-Type-Options', value: 'nosniff' },\n          { key: 'Referrer-Policy', value: 'origin-when-cross-origin' },\n        ],\n      },\n    ];\n  },\n};\n\nmodule.exports = nextConfig;",
    
    "tailwind_config_js": "/** @type {import('tailwindcss').Config} */\nmodule.exports = {\n  content: ['./src/**/*.{js,ts,jsx,tsx,mdx}'],\n  darkMode: 'class',\n  theme: {\n    extend: {\n      colors: {\n        primary: {\n          50: '#f0f9ff',\n          100: '#e0f2fe',\n          200: '#bae6fd',\n          300: '#7dd3fc',\n          400: '#38bdf8',\n          500: '#0ea5e9',\n          600: '#0284c7',\n          700: '#0369a1',\n          800: '#075985',\n          900: '#0c4a6e',\n        },\n      },\n      fontFamily: {\n        sans: ['Inter', 'system-ui', 'sans-serif'],\n        mono: ['Fira Code', 'monospace'],\n      },\n      animation: {\n        'fade-in': 'fadeIn 0.3s ease-in',\n        'slide-up': 'slideUp 0.4s ease-out',\n      },\n      keyframes: {\n        fadeIn: {\n          '0%': { opacity: '0' },\n          '100%': { opacity: '1' },\n        },\n        slideUp: {\n          '0%': { transform: 'translateY(20px)', opacity: '0' },\n          '100%': { transform: 'translateY(0)', opacity: '1' },\n        },\n      },\n    },\n  },\n  plugins: [\n    require('@tailwindcss/forms'),\n    require('@tailwindcss/typography'),\n  ],\n};",
    
    "env_example": "# Gemini API (Agent 1 + Agent 4)\nGEMINI_API_KEY=your-gemini-api-key-here\n\n# OpenAI API (Agent 2)\nOPENAI_API_KEY=your-openai-api-key-here\n\n# Anthropic API (Agent 3a + Agent 3b)\nANTHROPIC_API_KEY=your-anthropic-api-key-here\n\n# Application Environment Variables\nNEXT_PUBLIC_SITE_URL=http://localhost:3000\nNEXT_PUBLIC_YOUTUBE_API_KEY=your-youtube-api-key-here\nINFRANODUS_API_KEY=your-infranodus-api-key-here\n\n# YouTube Stream IDs\nNODVAST_YOUTUBE_ID=stream-id-1\nNODSYD_YOUTUBE_ID=stream-id-2\nNODOST_YOUTUBE_ID=stream-id-3\nNODMIDD_YOUTUBE_ID=stream-id-4\n\n# Event Configuration\nNEXT_PUBLIC_EVENT_DAY=1\nNEXT_PUBLIC_EVENT_DATES=2025-11-06,2025-11-07\n\n# Feature Flags\nNEXT_PUBLIC_ENABLE_INFRANODUS_MCP=false\nNEXT_PUBLIC_ENABLE_ANALYTICS=false"
  },

  "type_definitions": {
    "src/types/stream.ts": "export type StreamNode = 'nodvast' | 'nodsyd' | 'nodost' | 'nodmidd';\n\nexport type EventDay = 1 | 2;\n\nexport interface Stream {\n  id: StreamNode;\n  name: string;\n  youtubeId: string;\n  embedUrl: string;\n  active: boolean;\n  day: EventDay;\n}\n\nexport interface StreamHealth {\n  status: 'good' | 'ok' | 'bad' | 'offline';\n  message: string;\n  details?: {\n    bitrate: number;\n    resolution: string;\n    fps: number;\n  };\n}\n\nexport interface ViewerCount {\n  videoId: string;\n  concurrentViewers: number;\n}",
    
    "src/types/i18n.ts": "export type Locale = 'se' | 'en' | 'ar' | 'fa' | 'zh' | 'es';\n\nexport type Direction = 'ltr' | 'rtl';\n\nexport interface LocaleConfig {\n  code: Locale;\n  name: string;\n  nativeName: string;\n  direction: Direction;\n  flag: string;\n}\n\nexport const LOCALE_CONFIGS: Record<Locale, LocaleConfig> = {\n  se: { code: 'se', name: 'Swedish', nativeName: 'Svenska', direction: 'ltr', flag: '🇸🇪' },\n  en: { code: 'en', name: 'English', nativeName: 'English', direction: 'ltr', flag: '🇬🇧' },\n  ar: { code: 'ar', name: 'Arabic', nativeName: 'العربية', direction: 'rtl', flag: '🇸🇦' },\n  fa: { code: 'fa', name: 'Farsi', nativeName: 'فارسی', direction: 'rtl', flag: '🇮🇷' },\n  zh: { code: 'zh', name: 'Chinese', nativeName: '中文', direction: 'ltr', flag: '🇨🇳' },\n  es: { code: 'es', name: 'Spanish', nativeName: 'Español', direction: 'ltr', flag: '🇪🇸' },\n};",
    
    "src/types/api.ts": "import { Stream, StreamHealth, ViewerCount } from './stream';\nimport { EventDay } from './stream';\n\n// GET /api/streams\nexport interface StreamsResponse {\n  streams: Stream[];\n  currentDay: EventDay;\n}\n\n// GET /api/stream-health/[streamId]\nexport interface StreamHealthResponse extends StreamHealth {}\n\n// GET /api/viewer-count\nexport interface ViewerCountResponse {\n  counts: ViewerCount[];\n  total: number;\n}\n\n// POST /api/infranodus/analyze\nexport interface InfraNodusAnalyzeRequest {\n  text: string;\n  contextId: string;\n}\n\nexport interface InfraNodusAnalyzeResponse {\n  success: boolean;\n  contextId: string;\n  statementId: string;\n}\n\n// GET /api/infranodus/graph/[contextId]\nexport interface GraphNode {\n  id: string;\n  label: string;\n  val: number;\n}\n\nexport interface GraphLink {\n  source: string;\n  target: string;\n  value: number;\n}\n\nexport interface InfraNodusGraphResponse {\n  nodes: GraphNode[];\n  links: GraphLink[];\n}",
    
    "src/types/component.ts": "import { ReactNode } from 'react';\nimport { Locale } from './i18n';\n\nexport interface BaseComponentProps {\n  className?: string;\n  children?: ReactNode;\n}\n\nexport interface LocalizedComponentProps extends BaseComponentProps {\n  locale: Locale;\n}\n\nexport interface PageProps {\n  params: {\n    locale: Locale;\n  };\n  searchParams?: Record<string, string | string[] | undefined>;\n}"
  },

  "task_allocation": {
    "claude_frontend": [
      "Create src/app/layout.tsx (root layout with Header and Footer)",
      "Create src/app/[locale]/layout.tsx (locale-specific layout with RTL support)",
      "Create src/app/[locale]/page.tsx (home page with StreamGrid)",
      "Create src/app/[locale]/stream/[node]/page.tsx (individual stream page)",
      "Create src/app/[locale]/schedule/page.tsx (event schedule)",
      "Create src/app/[locale]/archive/page.tsx (VOD archive)",
      "Create src/app/[locale]/about/page.tsx (about page)",
      "Create src/components/features/Header.tsx",
      "Create src/components/features/Footer.tsx",
      "Create src/components/features/StreamGrid.tsx",
      "Create src/components/features/StreamCard.tsx",
      "Create src/components/features/YouTubeEmbed.tsx",
      "Create src/components/features/LanguageSelector.tsx",
      "Create src/components/features/ThemeToggle.tsx",
      "Create src/components/features/StreamHealthIndicator.tsx",
      "Create src/components/features/ViewerCount.tsx",
      "Create src/components/features/InfraNodusGraph.tsx",
      "Create src/components/features/ConceptCloud.tsx",
      "Create src/components/features/ScheduleTimeline.tsx",
      "Create src/components/features/EventCountdown.tsx",
      "Create src/components/ui/button.tsx",
      "Create src/components/ui/card.tsx",
      "Create src/components/ui/modal.tsx",
      "Create src/components/ui/select.tsx",
      "Create src/components/shared/Loading.tsx",
      "Create src/components/shared/ErrorBoundary.tsx",
      "Create src/components/shared/SEO.tsx",
      "Create src/hooks/useStreamHealth.ts",
      "Create src/hooks/useViewerCount.ts",
      "Create src/hooks/useLocalStorage.ts",
      "Create src/hooks/useMediaQuery.ts",
      "Create src/stores/streamStore.ts (Zustand)",
      "Create src/stores/uiStore.ts (Zustand)",
      "Create src/i18n/locales/se.json",
      "Create src/i18n/locales/en.json",
      "Create src/i18n/locales/ar.json",
      "Create src/i18n/locales/fa.json",
      "Create src/i18n/locales/zh.json",
      "Create src/i18n/locales/es.json",
      "Implement WCAG 2.2 AA accessibility standards",
      "Test RTL layout with Arabic and Farsi",
      "Write unit tests for components (Jest + Testing Library)",
      "Ensure performance budget: LCP <2.5s, CLS <0.1, JS <250KB"
    ],
    
    "claude_backend": [
      "Create src/app/api/streams/route.ts",
      "Create src/app/api/stream-health/[streamId]/route.ts",
      "Create src/app/api/viewer-count/route.ts",
      "Create src/app/api/infranodus/analyze/route.ts",
      "Create src/app/api/infranodus/graph/[contextId]/route.ts",
      "Create src/lib/youtube/client.ts (YouTube Data API v3 wrapper)",
      "Create src/lib/youtube/types.ts (YouTube API response types)",
      "Create src/lib/infranodus/client.ts (InfraNodus REST API wrapper)",
      "Create src/lib/infranodus/cache.ts (5-minute caching strategy)",
      "Create src/lib/infranodus/rate-limiter.ts (100 req/hour limiter)",
      "Create src/lib/utils/cn.ts (clsx + tailwind-merge utility)",
      "Create src/lib/utils/date.ts (date formatting)",
      "Create src/lib/utils/locale.ts (locale detection)",
      "Create src/i18n/config.ts (i18next configuration)",
      "Create comprehensive API documentation in docs/api/",
      "Write Router QoS configuration guide from plans/router_plan.md",
      "Write OBS multi-RTMP setup guide from plans/obs_plan.md",
      "Write YouTube channel setup guide from plans/yt_plan.md",
      "Write InfraNodus integration guide from plans/infranodus_plan.md",
      "Create operational procedures documentation",
      "Set up Jest configuration (jest.config.js)",
      "Set up Playwright E2E tests configuration",
      "Write integration tests for API routes",
      "Implement error handling and logging utilities",
      "Create deployment documentation (Vercel setup)"
    ]
  },

  "implementation_notes": {
    "parallel_execution": {
      "description": "Claude Frontend (3a) and Claude Backend (3b) will execute in parallel",
      "coordination": "API contracts defined in this document serve as the interface contract",
      "conflict_avoidance": "Clear separation: Frontend owns src/components, Backend owns src/app/api and src/lib clients",
      "shared_files": "Type definitions in src/types/ are READ-ONLY during parallel execution - no modifications"
    },
    
    "critical_dependencies": {
      "frontend_on_backend": [
        "API contracts must be implemented by backend before frontend can test",
        "Type definitions must be complete before component development"
      ],
      "backend_on_frontend": [
        "None - backend can develop independently using API contracts"
      ]
    },
    
    "testing_strategy": {
      "unit_tests": "Jest + React Testing Library for components (Frontend)",
      "integration_tests": "API route testing with mocked external services (Backend)",
      "e2e_tests": "Playwright for full user flows (Shared, run after both agents complete)",
      "coverage_target": ">80% for both frontend and backend"
    },
    
    "performance_optimization": {
      "code_splitting": "Dynamic imports for non-critical components (InfraNodusGraph, ConceptCloud)",
      "image_optimization": "Next.js Image component with AVIF/WebP formats",
      "font_optimization": "next/font for Inter and Fira Code with preloading",
      "bundle_size": "Monitor with next-bundle-analyzer, target <250KB JS"
    },
    
    "accessibility_requirements": {
      "keyboard_navigation": "All interactive elements must be keyboard-accessible",
      "screen_readers": "Proper ARIA labels and semantic HTML",
      "color_contrast": "4.5:1 minimum for text, 3:1 for UI components",
      "focus_indicators": "Visible focus styles on all focusable elements",
      "testing": "Automated testing with axe-core, manual testing with VoiceOver"
    }
  },

  "next_steps": {
    "immediate": [
      "Agent 3a (Claude Frontend) receives this architecture document",
      "Agent 3b (Claude Backend) receives this architecture document",
      "Both agents execute in parallel, creating files according to task allocation"
    ],
    
    "handoff_to_agent_3a": {
      "input_files": [
        "2_gpt5_codex_architecture.json",
        "plans/site_spec.md"
      ],
      "expected_output": "3a_claude_frontend_output.json with all frontend components and tests"
    },
    
    "handoff_to_agent_3b": {
      "input_files": [
        "2_gpt5_codex_architecture.json",
        "plans/router_plan.md",
        "plans/obs_plan.md",
        "plans/yt_plan.md",
        "plans/infranodus_plan.md",
        "plans/manuals_outline.md"
      ],
      "expected_output": "3b_claude_backend_output.json with all API routes, clients, and documentation"
    },
    
    "integration_phase": {
      "description": "After both Agent 3a and 3b complete, Agent 4 (Gemini CLI) will integrate outputs",
      "validation": "Verify type consistency, API contract compliance, test coverage",
      "final_steps": "Build production bundle, run E2E tests, deploy to Vercel"
    }
  }
}
